#!/bin/sh
# VMX Model Manager
#
# download: Script to download all VMX models from a remote VMX server such as
# models.vision.ai into a local VMX server such as one running on
# localhost:3000. 
#
# import: Script to import all models (represented as tarballs) from the
# DOWNLOAD_DIRECTORY folder into the vmx model container. This script
# will process the tarballs one by one, deleting the tarball after a
# successful import.
#
# upload: Admin tool to upload local models from a VMX node into
# models.vision.ai. Requires administrator priviledges (SSH key) on
# models.vision.ai.
# 
# Copyright vision.ai 2015

#always run in current directory
cd `dirname $0`

#Change the remote URL if you want to download models from another VMX endpoint
#REMOTE_URL="http://192.168.1.103:3000"
REMOTE_URL="https://models.vision.ai"

#Change the local URL if VMX is running on another port or using HTTPS
#LOCAL_URL="http://localhost:3000"
LOCAL_URL="http://localhost:3000"

#The directory where we make VMX model tarballs after downloading
DOWNLOAD_DIRECTORY=`pwd`'/incoming'

#The user/ip of the server we will try to upload to
UPLOAD_SSH="root@models.vision.ai"

#The URL to check if the models were imported or not
UPLOAD_URL="https://models.vision.ai"

# The directory on the upload server where models get imported
UPLOAD_DIR="/incoming"

# If non-empty, then LOCAL_URL is a Mac
if [ `uname` = "Linux" ]; then
    IS_MAC=""
    MAC_MODELS="/tmp/invalid"
else
    IS_MAC=`curl -s localhost:3000/check | jq -r ".version[0]" | grep Mac`
    MAC_MODELS="/Applications/VMX.app/Contents/MacOS/assets/models/"
fi
MAC_MODELS="/Applications/VMX.app/Contents/MacOS/assets/models/"

usage () {
  echo "VMX Model Manager by vision.ai"
  echo "Version: " `git describe --tags --dirty 2>/dev/null || echo no-git`
  echo "Requires docker >= 1.2; and permissions to run docker"
  echo "==============================================="
  echo "Usage: models.sh COMMAND [OPTIONS]"
  echo 
  echo "Commands:"
  echo "    download: Download models from remote server models.vision.ai into incoming folder"
  echo "    import:   Import models from incoming folder into VMX container"
  echo "    upload model_name:   Upload models to a remote location via SSH"
  echo " "
  echo "Examples:"
  echo " - Download publicly available models from models.vision.ai"
  echo "    $  ./models download"
  echo " "
  echo " - Import downloaded models into local VMX"
  echo "    $  ./models import"
  echo " "
  echo " - Upload a model called gesture-pack-12"
  echo "    $  ./models upload gesture-pack-12"
  echo " "
  echo " - Update the vmx-docker-manager"
  echo "    $  git pull"

  exit 1
}

check_dependencies() {
    # Dependencies: jq, curl, gzip, tar
    if [ "`which jq`" = "" ]; then
	echo "Dependency jq is missing, exiting"
	exit 1
    fi

    if [ "`which curl`" = "" ]; then
	echo "Dependency curl is missing, exiting"
	exit 1
    fi

    if [ "`which gzip`" = "" ]; then
	echo "Dependency gzip is missing, exiting"
	exit 1
    fi

    if [ "`which tar`" = "" ]; then
	echo "Dependency tar is missing, exiting"
	exit 1
    fi
}

download() {
    if [ "`curl -s ${REMOTE_URL}/model | jq -r '.data' 2> /dev/null`" = "" ]; then
	echo "Problem listing remote models at REMOTE_URL=${REMOTE_URL}"
	echo "Please change REMOTE_URL"
	exit
    fi
    
    if [ "`curl -s ${LOCAL_URL}/model | jq -r '.data' 2> /dev/null`" = "" ]; then
	echo "Problem listing local models at LOCAL_URL=${LOCAL_URL}"
	echo "Please change LOCAL_URL"
	exit
    fi
    
    if [ ! -e $DOWNLOAD_DIRECTORY ]; then
	echo "Directory" $DOWNLOAD_DIRECTORY "does not exist"
	echo "Make the directory or change DOWNLOAD_DIRECTORY"
	exit
    fi
    
    echo "This script will download all models from" $REMOTE_URL "which do not exist in " $LOCAL_URL "into" $DOWNLOAD_DIRECTORY
    LOCAL_UUIDS=`curl -s ${LOCAL_URL}/model | jq -r '.data[] .uuid'`
    REMOTE_UUIDS=`curl -s ${REMOTE_URL}/model | jq -r '.data[] .uuid'`
    
    for UUID in $REMOTE_UUIDS; do
	FINAL_TARBALL=$DOWNLOAD_DIRECTORY/${UUID}.tar.gz
	echo "----------"
	if [ -e $FINAL_TARBALL ]; then
	    echo $FINAL_TARBALL "already exists, skipping download"
	elif [ ! -n "`echo $LOCAL_UUIDS | grep $UUID`" ]; then
	    echo $UUID "not found in" $LOCAL_URL "so downloading"
	    mkdir $DOWNLOAD_DIRECTORY/$UUID/ 2> /dev/null
	    curl -s -o $DOWNLOAD_DIRECTORY/$UUID/image.jpg $REMOTE_URL/models/$UUID/image.jpg
	    curl -s -o $DOWNLOAD_DIRECTORY/$UUID/model.json $REMOTE_URL/models/$UUID/model.json
	    curl -s -o $DOWNLOAD_DIRECTORY/$UUID/compiled.data $REMOTE_URL/models/$UUID/compiled.data
	    curl -s -o $DOWNLOAD_DIRECTORY/$UUID/data_set.json $REMOTE_URL/models/$UUID/data_set.json
	    curl -s -o $DOWNLOAD_DIRECTORY/$UUID/model.data $REMOTE_URL/models/$UUID/model.data
	    
	    #Now we make a tarball from the downloaded files
	    echo "Making tarball" $FINAL_TARBALL
	    cd $DOWNLOAD_DIRECTORY/
	    tar cfz $UUID.tar.gz $UUID
	    
	    #And cleanup the directory
	    rm -rf $UUID
	    cd - > /dev/null 2>&1
	else
	    echo $UUID "already exists inside" $LOCAL_URL
	fi    
    done

    echo "Finished downloading"
    echo "Next step: Use \"./models import\" to import into VMX container"
    
}

import() {
    NFILES=`ls $DOWNLOAD_DIRECTORY/*.gz 2>/dev/null | wc -l`
    echo "Number of models in" $DOWNLOAD_DIRECTORY "is" $NFILES
    if [ "$NFILES" = "0" ]; then
	echo "No models to import, exiting"
	exit
    else
	echo "Importing $NFILES models"
    fi
    
    cd $DOWNLOAD_DIRECTORY
    FILES=`find . -name "*.tar.gz"`
    cd - 2> /dev/null
    for f in $FILES; do
	echo "Importing: " $f
        if [ "$IS_MAC" ]; then
            tar -C $MAC_MODELS -xf $DOWNLOAD_DIRECTORY/$f \
	        && echo "Cleaning up" $DOWNLOAD_DIRECTORY/$f \
	        && rm $DOWNLOAD_DIRECTORY/$f \
	        || echo "Problem with" $DOWNLOAD_DIRECTORY/$f
        else
	    docker run --rm --name vmx-export --volumes-from vmx-userdata:rw \
	        -v $DOWNLOAD_DIRECTORY/$f:/incoming/$f ubuntu /bin/bash \
	        -c "tar -C /vmx/models -xf /incoming/$f" \
	        && echo "Cleaning up" $DOWNLOAD_DIRECTORY/$f \
	        && rm $DOWNLOAD_DIRECTORY/$f \
	        || echo "Problem with" $DOWNLOAD_DIRECTORY/$f
        fi
    done
}

upload() {
    

    
    #make sure local endpoint works
    if [ "`curl -s $LOCAL_URL`" = "" ]; then
	echo "Cannot communicate with local VMX at $LOCAL_URL"
	echo "Make sure VMX is running"
	exit
    fi
    
    #Make sure the remote endpoint is responsing to REST API requests
    HAS_MODELS=`curl -s $UPLOAD_URL/model | jq -r '.data[]'`
    if [ "$HAS_MODELS" = "" ]; then
	echo "Remote endpoint $UPLOAD_URL is not listing models, exiting"
	exit
    fi
    
    #Make sure we have two command line arguments

    if [ "$MODEL_NAME" = "" ]; then
	echo "Usage: $0 upload model_name" >&2
	
	VALID_NAMES=`curl -s $LOCAL_URL/model | jq -r '.data[] .name'`
	echo "Valid names are:" $VALID_NAMES
	exit
    fi
    
    HI=`ssh -o PreferredAuthentications=publickey $UPLOAD_SSH "echo hi" 2>/dev/null`
    if [ "$HI" = "" ]; then
	echo "Improper credentials for talking to $UPLOAD_URL"
	echo "Remember to log-in with: ssh-add && ssh -A this.box.ip"
	exit
    fi
    
    
    #jump into local directory
    #cd `dirname $0`
    
    #Get the UUID for the desired model
    UUID=`curl -s $LOCAL_URL/model | jq -r '.data[] | select(.name=="'$MODEL_NAME'") .uuid'`
    
    if [ ! -n "$UUID" ]; then
	echo "Error: Cannot find model" $MODEL_NAME "in local models" $LOCAL_URL
	echo "Not copying"
	exit 1
    fi
    
    #check if that UUID is present on the remote server
    IS_PRESENT=`curl -s $UPLOAD_URL/model | jq -r '.data[] | select(.uuid=="'$UUID'") .name'`
    
    if [ -n "$IS_PRESENT" ]; then
	echo "Warning: already found model" $MODEL_NAME "UUID" $UUID "on remote server" $UPLOAD_URL
	echo "Not copying"
	exit
    fi
    
    echo UUID of object $MODEL_NAME is $UUID
    
    echo "Preparing tarball for copy"
    TARBALL=/tmp/$UUID.tar
    cd /tmp/
    mkdir $UUID
    
    #use curl to pull down models
    curl -o $UUID/image.jpg $LOCAL_URL/models/$UUID/image.jpg
    curl -o $UUID/model.json $LOCAL_URL/models/$UUID/model.json
    curl -o $UUID/model.data $LOCAL_URL/models/$UUID/model.data
    curl -o $UUID/data_set.json $LOCAL_URL/models/$UUID/data_set.json
    curl -o $UUID/compiled.data $LOCAL_URL/models/$UUID/compiled.data
    
    tar cf $TARBALL $UUID
    cd - > /dev/null 2>&1
    gzip $TARBALL
    TARBALL=${TARBALL}.gz
    
    echo "Copying tarball"
    ssh $UPLOAD_SSH "mkdir -p $UPLOAD_DIR"
    scp $TARBALL $UPLOAD_SSH:$UPLOAD_DIR
    
    echo "Importing into remote container"
    ssh $UPLOAD_SSH "~/vmx-docker-manager/models import"
    
    echo "Clearing tarball on local"
    rm $TARBALL
    
    cd - > /dev/null 2>&1
    
}

[ $# -lt 1 ] && {
  usage
}

#echo "Welcome to the vision.ai model manager"
check_dependencies

cmd=$1

case "$cmd" in
    download)
	download
	exit 0
	;;

    import)
	import
	exit 0
	;;

    upload)
	MODEL_NAME=$2
	upload
	exit 0
	;;

    *)
	usage
esac
