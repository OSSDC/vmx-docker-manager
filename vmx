#!/bin/sh

##PARAMS
cmd=$1
config=$2

COMMAND=$0

PARAMS=$@

init () {
  docker run -d --name vmx-mcr visionai/mcr-2014a
  docker run -d --name vmx-userdata visionai/vmx-userdata
  docker run -d --name vmx-middle visionai/vmx-middle
  docker run -d --name vmx-server visionai/vmx-server
  docker run -d --name vmx-appbuilder visionai/vmx-appbuilder
  touch .vmx-init
}


usage () {
  echo "VMX Docker Manager by vision.ai"
  echo "Requires docker >= 1.2; and perms to run docker"
  echo "==============================================="
  echo "Usage: vmx COMMAND [OPTIONS]"
  echo 
  echo "Commands:"
  echo "    start PORT:  Start vmx on localhost:PORT"
  echo "    stop:   Stop vmx"
  echo "    enter:  Shell access to docker"
  echo "    init :  download and start the containers that have the pre-reqs, mcr, etc. (This is done automatically the first time y ou start vmx)"
  echo "    update: update your vmx"
  echo "Example:"
  echo " - Run vmx on port 3000"
  echo "    $  ./vmx start 3000"
  exit 1
}

boot2docker_extra() {
    IS_B2D=`uname -a | grep boot2docker`
    UNAME=$(uname)
    if [ "$IS_B2D" != "" ]; then
        VMIP=`ip addr show eth1 |sed -nEe 's/^[ \t]*inet[ \t]*([0-9.]+)\/.*$/\1/p'`
    elif [ $UNAME == "Darwin" ]; then
        VMIP=`boot2docker ip 2>/dev/null`
    else
        VMIP=""
    fi

    if [ "$VMIP" != "" ]; then
        echo "You are using boot2docker, your local VMX url will be:"
        echo "http://"${VMIP}":"${VMXHOSTPORT}
    fi    
}

check_perm() {
  docker run -rm busybox echo >/dev/null 2>&1
  NON_ROOT_RUN_DOCKER_EXIT_CODE="$?"
  if [ $NON_ROOT_RUN_DOCKER_EXIT_CODE -eq 1 ] ; then
    echo "Permissions failed.."
    echo "try \`sudo $COMMAND $PARAMS\`"
    exit 1
  elif [ $NON_ROOT_RUN_DOCKER_EXIT_CODE -ne 0 ]; then
    echo "Trying to run docker resulted in exit code: $NON_ROOT_RUN_DOCKER_EXIT_CODE"
    exit $NON_ROOT_RUN_DOCKER_EXIT_CODE
  fi
}


start_vmx () {
  RUNNING=$(docker ps | grep 'vmx-environment' | wc -l)
  if [ "$RUNNING" -ne "1" ]; then
    echo "Starting vmx with port $VMXHOSTPORT"
    boot2docker_extra
    docker run -t                   \
      --volumes-from vmx-mcr        \
      --volumes-from vmx-userdata   \
      --volumes-from vmx-middle     \
      --volumes-from vmx-server     \
      --volumes-from vmx-appbuilder \
      -p $VMXHOSTPORT:3000          \
      --name vmx-environment        \
      --rm                          \
      visionai/vmx-environment /vmx/middle/vmx
  else
    echo "Already running vmx-environment"
    exit 1
  fi
}

stop_vmx () {
  docker stop vmx-environment
  docker rm   vmx-environment
}

enter_vmx () {
  RUNNING_INSPECT=$(docker ps -a| grep 'vmx-inspect-environment' | wc -l)
  if [ "$RUNNING_INSPECT" -ne "1" ]; then
    docker run -i -t                 \
      --volumes-from vmx-mcr         \
      --volumes-from vmx-userdata    \
      --volumes-from vmx-middle      \
      --volumes-from vmx-server      \
      --volumes-from vmx-appbuilder  \
      -p $VMXHOSTPORT:3000           \
      --name vmx-inspect-environment \
      --rm                           \
      visionai/vmx-environment /bin/bash
  else
    echo "Stopping previous inspection container.."
    docker stop vmx-inspect-environment
    echo "Removing previous inspection container.."
    docker rm vmx-inspect-environment
    enter_vmx
  fi
    
}


update_vmx(){
  #stop vmx
  docker stop vmx-environment
  docker rm vmx-tmp

  mkdir -p .vmx-backup
  #store the config
  echo Starting temp container 'vmx-tmp' 
  sudo docker run --name vmx-tmp --volumes-from vmx-server:ro ubuntu cp /vmx/build/config.json /config.json

  docker cp vmx-tmp:/config.json `pwd`/.vmx-backup/
  docker stop vmx-tmp
  docker rm vmx-tmp


  #stop and update 
  docker stop vmx-middle
  docker stop vmx-server
  docker stop vmx-appbuilder

  docker rm vmx-middle
  docker rm vmx-server
  docker rm vmx-appbuilder

  docker pull visionai/vmx-middle
  docker pull visionai/vmx-server
  docker pull visionai/vmx-appbuilder

  docker run --name vmx-middle visionai/vmx-middle
  docker run --name vmx-server visionai/vmx-server
  docker run --name vmx-appbuilder visionai/vmx-appbuilder

  #make a temp container for copying
  docker run --name vmx-tmp --volumes-from vmx-server -v `pwd`/.vmx-backup:/vmx-backup ubuntu cp /vmx-backup/config.json /vmx/build/config.json
  docker rm vmx-tmp

  docker rm vmx-environment

  echo "Successfully updated, you can now restart VMX"
  exit 0

}


[ $# -lt 1 ] && {
  usage
}

check_perm

case "$cmd" in
  start)
    if [ $# -lt 2 ]; then
      echo "Must supply port"
      usage
    fi    
    if [ ! -e ".vmx-init" ]; then
      echo "Downloading dependencies (this may take a while)"
      init
    fi
    export VMXHOSTPORT=$2
    start_vmx
    echo "Successfully started vmx"
    exit 0
    ;;

  stop)
    stop_vmx
    echo "Stopped vmx"
    exit 0
    ;;

  update)
    update_vmx
    echo "Stopped vmx"
    exit 0
    ;;

  enter)
    enter_vmx
    exit 0
    ;;

  init)
    init
    echo "Successfully boostrapped!"
    exit 0
    ;;

  *)
    usage
esac

do_not () {
docker stop vmx-environment
docker rm vmx-environment

}
